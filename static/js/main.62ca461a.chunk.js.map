{"version":3,"sources":["components/Dice.js","App.js","reportWebVitals.js","index.js"],"names":["Dice","props","icons","faDiceOne","faDiceTwo","faDiceThree","faDiceFour","faDiceFive","faDiceSix","dice","onClick","handleDiceClickParent","index","icon","value","style","width","height","cursor","Col","xs","md","lg","className","tag","countRoll","App","useState","Array","fill","dicesValues","setDicesValues","countRollDices","setCountRollDices","handleDiceClick","slice","Math","floor","random","dices","map","Container","Row","Button","count","backgroundColor","color","reduce","a","b","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAWO,SAASA,EAAKC,GACnB,IAAMC,EAAQ,CACZC,IACAC,IACAC,IACAC,IACAC,IACAC,KAOEC,EACF,cAAC,IAAD,CACEC,QANgB,WAClBT,EAAMU,sBAAsBV,EAAMW,QAMhCC,KAAMX,EAAMD,EAAMa,MAAQ,GAC1BC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,OAAQ,aAItD,OACE,cAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAtB,SACE,sBAAKC,UAAU,wCAAf,UACGd,EACD,qBAAIe,IAAI,KAAR,cAAevB,EAAMwB,UAArB,Y,4BCyBOC,MAzDf,WACE,MAAsCC,mBAASC,MAAM,GAAGC,KAAK,IAA7D,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA4CJ,mBAASC,MAAM,GAAGC,KAAK,IAAnE,mBAAOG,EAAP,KAAuBC,EAAvB,KASMC,EAAkB,SAACtB,GACvBmB,EAAe,GAAD,mBACTD,EAAYK,MAAM,EAAGvB,IADZ,CAEZwB,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,GAFpB,YAGTR,EAAYK,MAAMvB,EAAQ,MAE/BqB,EAAkB,GAAD,mBACZD,EAAeG,MAAM,EAAGvB,IADZ,CAEfoB,EAAepB,GAAS,GAFT,YAGZoB,EAAeG,MAAMvB,EAAQ,OAIhC2B,EAAQT,EAAYU,KAAI,SAAC1B,EAAOF,GAAR,OAC1B,cAACZ,EAAD,CACEc,MAAOA,EACPW,UAAWO,EAAepB,GAC1BA,MAAOA,EACPD,sBAAuBuB,OAI3B,OACE,eAACO,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKnB,UAAU,OAAf,SACE,cAACJ,EAAA,EAAD,CAAKI,UAAU,gCAAf,SACE,cAACoB,EAAA,EAAD,CACEjC,QAlCc,WACtBqB,EACED,EAAYU,KAAI,SAAC1B,GAAD,OAAWsB,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,MAE7DL,EAAkBD,EAAeQ,KAAI,SAACI,GAAD,OAAWA,EAAQ,OA+BhD7B,MAAO,CAAE8B,gBAAiB,UAAWC,MAAO,WAF9C,SAIE,4CAKN,cAACJ,EAAA,EAAD,CAAKnB,UAAU,OAAf,SACE,cAACJ,EAAA,EAAD,CAAKI,UAAU,gCAAf,SACE,oBAAIA,UAAU,UAAd,SAAyBO,EAAYiB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,WAI9D,cAACP,EAAA,EAAD,CAAKnB,UAAU,yBAAf,SAAyCgB,QC7ChCW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.62ca461a.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faDiceOne,\r\n  faDiceTwo,\r\n  faDiceThree,\r\n  faDiceFour,\r\n  faDiceFive,\r\n  faDiceSix,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Col } from \"reactstrap\";\r\n\r\nexport function Dice(props) {\r\n  const icons = [\r\n    faDiceOne,\r\n    faDiceTwo,\r\n    faDiceThree,\r\n    faDiceFour,\r\n    faDiceFive,\r\n    faDiceSix,\r\n  ];\r\n  \r\n  const handleClick = () => {\r\n    props.handleDiceClickParent(props.index);\r\n  };\r\n\r\n  let dice = (\r\n    <FontAwesomeIcon\r\n      onClick={handleClick}\r\n      icon={icons[props.value - 1]}\r\n      style={{ width: \"10rem\", height: \"10rem\", cursor: \"pointer\" }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Col xs=\"6\" md=\"4\" lg=\"2\">\r\n      <div className=\"d-flex flex-column align-items-center\">\r\n        {dice}\r\n        <h2 tag=\"h5\">({props.countRoll})</h2>\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { Dice } from \"./components/Dice\";\nimport { Container, Row, Col, Button } from \"reactstrap\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [dicesValues, setDicesValues] = useState(Array(5).fill(1));\n  const [countRollDices, setCountRollDices] = useState(Array(5).fill(0));\n\n  const handleRollClick = () => {\n    setDicesValues(\n      dicesValues.map((value) => Math.floor(Math.random() * 6) + 1)\n    );\n    setCountRollDices(countRollDices.map((count) => count + 1));\n  };\n\n  const handleDiceClick = (index) => {\n    setDicesValues([\n      ...dicesValues.slice(0, index),\n      Math.floor(Math.random() * 6) + 1,\n      ...dicesValues.slice(index + 1),\n    ]);\n    setCountRollDices([\n      ...countRollDices.slice(0, index),\n      countRollDices[index] + 1,\n      ...countRollDices.slice(index + 1),\n    ]);\n  };\n\n  let dices = dicesValues.map((value, index) => (\n    <Dice\n      value={value}\n      countRoll={countRollDices[index]}\n      index={index}\n      handleDiceClickParent={handleDiceClick}\n    />\n  ));\n\n  return (\n    <Container>\n      <Row className=\"mb-5\">\n        <Col className=\"d-flex justify-content-center\">\n          <Button\n            onClick={handleRollClick}\n            style={{ backgroundColor: \"#212529\", color: \"#D3FBD8\" }}\n          >\n            <h2>Roll</h2>\n          </Button>\n        </Col>\n      </Row>\n\n      <Row className=\"mb-5\">\n        <Col className=\"d-flex justify-content-center\">\n          <h2 className=\"fw-bold\">{dicesValues.reduce((a, b) => a + b)}</h2>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-center\">{dices}</Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}