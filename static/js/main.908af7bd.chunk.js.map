{"version":3,"sources":["components/Dice.js","App.js","reportWebVitals.js","index.js"],"names":["Dice","props","icons","faDiceOne","faDiceTwo","faDiceThree","faDiceFour","faDiceFive","faDiceSix","dice","onClick","handleDiceClickParent","index","icon","value","style","width","height","cursor","border","isSelected","Col","xs","md","lg","className","tag","countRoll","App","useState","Array","fill","dicesValues","setDicesValues","setIsSelected","countRollDices","setCountRollDices","setCountRoll","handleDiceClick","slice","dices","map","Container","Row","Button","Math","floor","random","count","includes","backgroundColor","color","reduce","a","b","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAWO,SAASA,EAAKC,GACnB,IAAMC,EAAQ,CACZC,IACAC,IACAC,IACAC,IACAC,IACAC,KAOEC,EACF,cAAC,IAAD,CACEC,QANgB,WAClBT,EAAMU,sBAAsBV,EAAMW,QAMhCC,KAAMX,EAAMD,EAAMa,MAAQ,GAC1BC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,OAAQ,UAAWC,OAASlB,EAAMmB,WAA+B,GAAlB,mBAI7F,OACE,cAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAtB,SACE,sBAAKC,UAAU,wCAAf,UACGhB,EACD,qBAAIiB,IAAI,KAAR,cAAezB,EAAM0B,UAArB,Y,4BCmCOC,MAnEf,WACE,MAAsCC,mBAASC,MAAM,GAAGC,KAAK,IAA7D,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCJ,mBAASC,MAAM,GAAGC,MAAK,IAA3D,mBAAOX,EAAP,KAAmBc,EAAnB,KACA,EAA4CL,mBAASC,MAAM,GAAGC,KAAK,IAAnE,mBAAOI,EAAP,KAAuBC,EAAvB,KACA,EAAkCP,mBAAS,GAA3C,mBAAOF,EAAP,KAAkBU,EAAlB,KAkBMC,EAAkB,SAAC1B,GACvBsB,EAAc,GAAD,mBACRd,EAAWmB,MAAM,EAAG3B,IADZ,EAEVQ,EAAWR,IAFD,YAGRQ,EAAWmB,MAAM3B,EAAQ,OAI5B4B,EAAQR,EAAYS,KAAI,SAAC3B,EAAOF,GAAR,OAC1B,cAACZ,EAAD,CACEc,MAAOA,EACPa,UAAWQ,EAAevB,GAC1BA,MAAOA,EACPD,sBAAuB2B,EACvBlB,WAAYA,EAAWR,QAI3B,OACE,eAAC8B,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKlB,UAAU,OAAf,SACE,cAACJ,EAAA,EAAD,CAAKI,UAAU,gCAAf,SACE,cAACmB,EAAA,EAAD,CACElC,QAvCc,WACtBuB,EACED,EAAYS,KAAI,SAAC3B,EAAOF,GACtB,OAAOQ,EAAWR,GAASiC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAAIjC,MAGnEsB,EACED,EAAeM,KAAI,SAACO,EAAOpC,GACzB,OAAOQ,EAAWR,GAASoC,EAAQ,EAAIA,MAG3C5B,EAAW6B,UAAS,GAChBZ,EAAaV,EAAY,GACzBU,EAAaV,IA2BTZ,MAAO,CAAEmC,gBAAiB,UAAWC,MAAO,WAF9C,SAIE,6CAAaxB,WAKnB,cAACgB,EAAA,EAAD,CAAKlB,UAAU,OAAf,SACE,eAACJ,EAAA,EAAD,CAAKI,UAAU,+DAAf,UACE,oBAAIA,UAAU,UAAd,SAAyBO,EAAYoB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,OAC1D,oBAAI7B,UAAU,UAAd,SAC2C,KAAxCO,EAAYoB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAY,WAAa,UAKjE,cAACX,EAAA,EAAD,CAAKlB,UAAU,yBAAf,SAAyCe,QCvDhCe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.908af7bd.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faDiceOne,\r\n  faDiceTwo,\r\n  faDiceThree,\r\n  faDiceFour,\r\n  faDiceFive,\r\n  faDiceSix,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Col } from \"reactstrap\";\r\n\r\nexport function Dice(props) {\r\n  const icons = [\r\n    faDiceOne,\r\n    faDiceTwo,\r\n    faDiceThree,\r\n    faDiceFour,\r\n    faDiceFive,\r\n    faDiceSix,\r\n  ];\r\n\r\n  const handleClick = () => {\r\n    props.handleDiceClickParent(props.index);\r\n  };\r\n\r\n  let dice = (\r\n    <FontAwesomeIcon\r\n      onClick={handleClick}\r\n      icon={icons[props.value - 1]}\r\n      style={{ width: \"10rem\", height: \"10rem\", cursor: \"pointer\", border: !props.isSelected ? '1px solid red' : '' }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Col xs=\"6\" md=\"4\" lg=\"2\">\r\n      <div className=\"d-flex flex-column align-items-center\">\r\n        {dice}\r\n        <h2 tag=\"h5\">({props.countRoll})</h2>\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { Dice } from \"./components/Dice\";\nimport { Container, Row, Col, Button } from \"reactstrap\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [dicesValues, setDicesValues] = useState(Array(5).fill(1));\n  const [isSelected, setIsSelected] = useState(Array(5).fill(true));\n  const [countRollDices, setCountRollDices] = useState(Array(5).fill(0));\n  const [countRoll, setCountRoll] = useState(0);\n\n  const handleRollClick = () => {\n    setDicesValues(\n      dicesValues.map((value, index) => {\n        return isSelected[index] ? Math.floor(Math.random() * 6) + 1 : value;\n      })\n    );\n    setCountRollDices(\n      countRollDices.map((count, index) => {\n        return isSelected[index] ? count + 1 : count;\n      })\n    );\n    isSelected.includes(true)\n      ? setCountRoll(countRoll + 1)\n      : setCountRoll(countRoll);\n  };\n\n  const handleDiceClick = (index) => {\n    setIsSelected([\n      ...isSelected.slice(0, index),\n      !isSelected[index],\n      ...isSelected.slice(index + 1),\n    ]);\n  };\n\n  let dices = dicesValues.map((value, index) => (\n    <Dice\n      value={value}\n      countRoll={countRollDices[index]}\n      index={index}\n      handleDiceClickParent={handleDiceClick}\n      isSelected={isSelected[index]}\n    />\n  ));\n\n  return (\n    <Container>\n      <Row className=\"mb-5\">\n        <Col className=\"d-flex justify-content-center\">\n          <Button\n            onClick={handleRollClick}\n            style={{ backgroundColor: \"#212529\", color: \"#D3FBD8\" }}\n          >\n            <h2>Roll nÂ° {countRoll}</h2>\n          </Button>\n        </Col>\n      </Row>\n\n      <Row className=\"mb-5\">\n        <Col className=\"d-flex flex-column justify-content-center align-items-center\">\n          <h2 className=\"fw-bold\">{dicesValues.reduce((a, b) => a + b)}</h2>\n          <h2 className=\"fw-bold\">\n            {dicesValues.reduce((a, b) => a + b) === 30 ? \"Bravo!!!\" : \"\"}\n          </h2>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-center\">{dices}</Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}